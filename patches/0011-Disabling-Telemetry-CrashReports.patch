From 2638c626dd18d2a2bba98de82c4a1567925642e6 Mon Sep 17 00:00:00 2001
From: Sam Macbeth <sam@cliqz.com>
Date: Mon, 3 Aug 2020 16:46:47 +0200
Subject: Disabling Telemetry & CrashReports

---
 app/build.gradle                              |  2 +-
 .../org/mozilla/fenix/FenixApplication.kt     | 41 +------------------
 .../org/mozilla/fenix/components/Analytics.kt | 32 ++++-----------
 .../fenix/crashes/DummyCrashReporter.kt       | 19 +++++++++
 app/src/main/res/xml/preferences.xml          | 10 -----
 5 files changed, 30 insertions(+), 74 deletions(-)
 create mode 100644 app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt

diff --git a/app/build.gradle b/app/build.gradle
index 4f61efd53..260ba122d 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -102,7 +102,7 @@ android {
         debug {
             shrinkResources false
             minifyEnabled false
-            applicationIdSuffix ".fenix.debug"
+            applicationIdSuffix ".debug"
             resValue "bool", "IS_DEBUG", "true"
             pseudoLocalesEnabled true
         }
diff --git a/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index 8fa482e91..e28fd89f3 100644
--- a/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -33,8 +33,6 @@ import mozilla.components.feature.addons.migration.DefaultSupportedAddonsChecker
 import mozilla.components.feature.addons.update.GlobalAddonDependencyProvider
 import mozilla.components.lib.crash.CrashReporter
 import mozilla.components.service.glean.Glean
-import mozilla.components.service.glean.config.Configuration
-import mozilla.components.service.glean.net.ConceptFetchHttpUploader
 import mozilla.components.support.base.facts.register
 import mozilla.components.support.base.log.Log
 import mozilla.components.support.base.log.logger.Logger
@@ -45,7 +43,6 @@ import mozilla.components.support.rusthttp.RustHttpConfig
 import mozilla.components.support.rustlog.RustLog
 import mozilla.components.support.utils.logElapsedTime
 import mozilla.components.support.webextensions.WebExtensionSupport
-import org.mozilla.fenix.GleanMetrics.GleanBuildInfo
 import org.mozilla.fenix.GleanMetrics.Metrics
 import org.mozilla.fenix.GleanMetrics.PerfStartup
 import org.mozilla.fenix.components.Components
@@ -118,45 +115,12 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
             return
         }
 
-        if (Config.channel.isFenix) {
-            // We need to always initialize Glean and do it early here.
-            // Note that we are only initializing Glean here for "fenix" builds. "fennec" builds
-            // will initialize in MigratingFenixApplication because we first need to migrate the
-            // user's choice from Fennec.
-            initializeGlean()
-        }
-
         setupInMainProcessOnly()
 
         // DO NOT MOVE ANYTHING BELOW THIS stop CALL.
         PerfStartup.applicationOnCreate.stopAndAccumulate(completeMethodDurationTimerId)
     }
 
-    @OptIn(DelicateCoroutinesApi::class) // GlobalScope usage
-    protected open fun initializeGlean() {
-        val telemetryEnabled = settings().isTelemetryEnabled
-
-        logger.debug("Initializing Glean (uploadEnabled=$telemetryEnabled, isFennec=${Config.channel.isFennec})")
-
-        Glean.initialize(
-            applicationContext = this,
-            configuration = Configuration(
-                channel = BuildConfig.BUILD_TYPE,
-                httpClient = ConceptFetchHttpUploader(
-                    lazy(LazyThreadSafetyMode.NONE) { components.core.client }
-                )
-            ),
-            uploadEnabled = telemetryEnabled,
-            buildInfo = GleanBuildInfo.buildInfo
-        )
-
-        // We avoid blocking the main thread on startup by setting startup metrics on the background thread.
-        val store = components.core.store
-        GlobalScope.launch(Dispatchers.IO) {
-            setStartupMetrics(store, settings())
-        }
-    }
-
     @CallSuper
     open fun setupInAllProcesses() {
         setupCrashReporting()
@@ -375,10 +339,7 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
     }
 
     private fun setupCrashReporting() {
-        components
-            .analytics
-            .crashReporter
-            .install(this)
+
     }
 
     /**
diff --git a/app/src/main/java/org/mozilla/fenix/components/Analytics.kt b/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
index 2bb3655af..bd967b625 100644
--- a/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
+++ b/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
@@ -11,7 +11,6 @@ import android.content.Intent
 import mozilla.components.lib.crash.CrashReporter
 import mozilla.components.lib.crash.service.CrashReporterService
 import mozilla.components.lib.crash.service.GleanCrashReporterService
-import mozilla.components.lib.crash.service.MozillaSocorroService
 import mozilla.components.lib.crash.service.SentryService
 import mozilla.components.service.nimbus.NimbusApi
 import org.mozilla.fenix.BuildConfig
@@ -22,6 +21,7 @@ import org.mozilla.fenix.ReleaseChannel
 import org.mozilla.fenix.components.metrics.AdjustMetricsService
 import org.mozilla.fenix.components.metrics.GleanMetricsService
 import org.mozilla.fenix.components.metrics.MetricController
+import org.mozilla.fenix.crashes.DummyCrashReporter
 import org.mozilla.fenix.experiments.NimbusFeatures
 import org.mozilla.fenix.experiments.createNimbus
 import org.mozilla.fenix.ext.settings
@@ -39,10 +39,6 @@ class Analytics(
 ) {
     val crashReporter: CrashReporter by lazyMonitored {
         val services = mutableListOf<CrashReporterService>()
-        val distributionId = when (Config.channel.isMozillaOnline) {
-            true -> "MozillaOnline"
-            false -> "Mozilla"
-        }
 
         if (isSentryEnabled()) {
             val sentryService = SentryService(
@@ -55,17 +51,10 @@ class Analytics(
             )
 
             services.add(sentryService)
+        } else {
+            services.add(DummyCrashReporter())
         }
 
-        // The name "Fenix" here matches the product name on Socorro and is unrelated to the actual app name:
-        // https://bugzilla.mozilla.org/show_bug.cgi?id=1523284
-        val socorroService = MozillaSocorroService(
-            context, appName = "Fenix",
-            version = MOZ_APP_VERSION, buildId = MOZ_APP_BUILDID, vendor = MOZ_APP_VENDOR,
-            releaseChannel = MOZ_UPDATE_CHANNEL, distributionId = distributionId
-        )
-        services.add(socorroService)
-
         val intent = Intent(context, HomeActivity::class.java).apply {
             flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
         }
@@ -80,11 +69,11 @@ class Analytics(
         CrashReporter(
             context = context,
             services = services,
-            telemetryServices = listOf(GleanCrashReporterService(context)),
-            shouldPrompt = CrashReporter.Prompt.ALWAYS,
+            telemetryServices = listOf(),
+            shouldPrompt = CrashReporter.Prompt.NEVER,
             promptConfiguration = CrashReporter.PromptConfiguration(
                 appName = context.getString(R.string.app_name),
-                organizationName = "Mozilla"
+                organizationName = "Ghostery"
             ),
             enabled = true,
             nonFatalCrashIntent = pendingIntent
@@ -93,12 +82,9 @@ class Analytics(
 
     val metrics: MetricController by lazyMonitored {
         MetricController.create(
-            listOf(
-                GleanMetricsService(context),
-                AdjustMetricsService(context as Application)
-            ),
-            isDataTelemetryEnabled = { context.settings().isTelemetryEnabled },
-            isMarketingDataTelemetryEnabled = { context.settings().isMarketingTelemetryEnabled },
+            listOf(),
+            isDataTelemetryEnabled = { false },
+            isMarketingDataTelemetryEnabled = { false },
             context.settings()
         )
     }
diff --git a/app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt b/app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt
new file mode 100644
index 000000000..de5b53ff5
--- /dev/null
+++ b/app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt
@@ -0,0 +1,19 @@
+package org.mozilla.fenix.crashes
+
+import mozilla.components.lib.crash.Crash
+import mozilla.components.lib.crash.service.CrashReporterService
+import mozilla.components.concept.base.crash.Breadcrumb
+
+class DummyCrashReporter : CrashReporterService {
+    override val id: String = "dummy"
+
+    override val name: String = "dummy"
+
+    override fun createCrashReportUrl(identifier: String): String? = null
+
+    override fun report(throwable: Throwable, breadcrumbs: ArrayList<Breadcrumb>): String? = null
+
+    override fun report(crash: Crash.NativeCodeCrash): String? = null
+
+    override fun report(crash: Crash.UncaughtExceptionCrash): String? = null
+}
\ No newline at end of file
diff --git a/app/src/main/res/xml/preferences.xml b/app/src/main/res/xml/preferences.xml
index e1e9be315..9308df8be 100644
--- a/app/src/main/res/xml/preferences.xml
+++ b/app/src/main/res/xml/preferences.xml
@@ -125,16 +125,6 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_delete_browsing_data_on_quit" />
 
-        <androidx.preference.Preference
-            android:key="@string/pref_key_notifications"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_notifications" />
-
-        <androidx.preference.Preference
-            android:key="@string/pref_key_data_choices"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_data_collection" />
-
     </androidx.preference.PreferenceCategory>
 
     <PreferenceCategory
-- 
2.34.1

