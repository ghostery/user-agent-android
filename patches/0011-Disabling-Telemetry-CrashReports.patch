From f327ac2866e387551507e76118d7b88a5537febc Mon Sep 17 00:00:00 2001
From: Sam Macbeth <sam@cliqz.com>
Date: Mon, 3 Aug 2020 16:46:47 +0200
Subject: Disabling Telemetry & CrashReports

---
 .../org/mozilla/fenix/FenixApplication.kt     |  6 +--
 .../org/mozilla/fenix/components/Analytics.kt | 38 ++++---------------
 .../fenix/crashes/DummyCrashReporter.kt       | 19 ++++++++++
 .../fenix/settings/SettingsFragment.kt        |  1 -
 fenix/app/src/main/res/xml/preferences.xml    | 10 -----
 5 files changed, 28 insertions(+), 46 deletions(-)
 create mode 100644 fenix/app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt

diff --git a/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt b/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
index ce569f79bb..9c248ebbb3 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/FenixApplication.kt
@@ -168,7 +168,7 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
     @OptIn(DelicateCoroutinesApi::class) // GlobalScope usage
     @VisibleForTesting
     protected open fun initializeGlean() {
-        val telemetryEnabled = settings().isTelemetryEnabled
+        val telemetryEnabled = false

         logger.debug("Initializing Glean (uploadEnabled=$telemetryEnabled})")

@@ -459,10 +459,6 @@ open class FenixApplication : LocaleAwareApplication(), Provider {
     }

     private fun setupCrashReporting() {
-        components
-            .analytics
-            .crashReporter
-            .install(this)
     }

     protected open fun initializeNimbus() {
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt b/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
index 7fc3826788..8eee7abbbd 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/components/Analytics.kt
@@ -30,6 +30,7 @@ import org.mozilla.fenix.components.metrics.InstallReferrerMetricsService
 import org.mozilla.fenix.components.metrics.MetricController
 import org.mozilla.fenix.components.metrics.MetricsStorage
 import org.mozilla.fenix.crashes.CrashFactCollector
+import org.mozilla.fenix.crashes.DummyCrashReporter
 import org.mozilla.fenix.experiments.createNimbus
 import org.mozilla.fenix.ext.components
 import org.mozilla.fenix.ext.settings
@@ -49,10 +50,6 @@ class Analytics(
 ) {
     val crashReporter: CrashReporter by lazyMonitored {
         val services = mutableListOf<CrashReporterService>()
-        val distributionId = when (Config.channel.isMozillaOnline) {
-            true -> "MozillaOnline"
-            false -> "Mozilla"
-        }

         if (isSentryEnabled()) {
             // We treat caught exceptions similar to debug logging.
@@ -86,21 +83,10 @@ class Analytics(
             }

             services.add(sentryService)
+        } else {
+            services.add(DummyCrashReporter())
         }

-        // The name "Fenix" here matches the product name on Socorro and is unrelated to the actual app name:
-        // https://bugzilla.mozilla.org/show_bug.cgi?id=1523284
-        val socorroService = MozillaSocorroService(
-            context,
-            appName = "Fenix",
-            version = MOZ_APP_VERSION,
-            buildId = MOZ_APP_BUILDID,
-            vendor = MOZ_APP_VENDOR,
-            releaseChannel = MOZ_UPDATE_CHANNEL,
-            distributionId = distributionId,
-        )
-        services.add(socorroService)
-
         val intent = Intent(context, HomeActivity::class.java).apply {
             flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
         }
@@ -109,11 +95,11 @@ class Analytics(
         CrashReporter(
             context = context,
             services = services,
-            telemetryServices = listOf(GleanCrashReporterService(context)),
+            telemetryServices = listOf(),
             shouldPrompt = CrashReporter.Prompt.ALWAYS,
             promptConfiguration = CrashReporter.PromptConfiguration(
                 appName = context.getString(R.string.app_name),
-                organizationName = "Mozilla",
+                organizationName = "Ghostery",
             ),
             enabled = true,
             nonFatalCrashIntent = pendingIntent,
@@ -135,17 +121,9 @@ class Analytics(

     val metrics: MetricController by lazyMonitored {
         MetricController.create(
-            listOf(
-                GleanMetricsService(context),
-                AdjustMetricsService(
-                    application = context as Application,
-                    storage = metricsStorage,
-                    crashReporter = crashReporter,
-                ),
-                InstallReferrerMetricsService(context),
-            ),
-            isDataTelemetryEnabled = { context.settings().isTelemetryEnabled },
-            isMarketingDataTelemetryEnabled = { context.settings().isMarketingTelemetryEnabled },
+            listOf(),
+            isDataTelemetryEnabled = { false },
+            isMarketingDataTelemetryEnabled = { false },
             context.settings(),
         )
     }
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt b/fenix/app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt
new file mode 100644
index 0000000000..de5b53ff5a
--- /dev/null
+++ b/fenix/app/src/main/java/org/mozilla/fenix/crashes/DummyCrashReporter.kt
@@ -0,0 +1,19 @@
+package org.mozilla.fenix.crashes
+
+import mozilla.components.lib.crash.Crash
+import mozilla.components.lib.crash.service.CrashReporterService
+import mozilla.components.concept.base.crash.Breadcrumb
+
+class DummyCrashReporter : CrashReporterService {
+    override val id: String = "dummy"
+
+    override val name: String = "dummy"
+
+    override fun createCrashReportUrl(identifier: String): String? = null
+
+    override fun report(throwable: Throwable, breadcrumbs: ArrayList<Breadcrumb>): String? = null
+
+    override fun report(crash: Crash.NativeCodeCrash): String? = null
+
+    override fun report(crash: Crash.UncaughtExceptionCrash): String? = null
+}
\ No newline at end of file
diff --git a/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt b/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
index bb1e1fd1f9..765524168e 100644
--- a/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
+++ b/fenix/app/src/main/java/org/mozilla/fenix/settings/SettingsFragment.kt
@@ -491,7 +491,6 @@ class SettingsFragment : PreferenceFragmentCompat() {
         setupGeckoLogsPreference(requireContext().settings())
         setupAllowDomesticChinaFxaServerPreference()
         setupHttpsOnlyPreferences()
-        setupNotificationPreference()
         setupSearchPreference()
         setupHomepagePreference()
         setupTrackingProtectionPreference()
diff --git a/fenix/app/src/main/res/xml/preferences.xml b/fenix/app/src/main/res/xml/preferences.xml
index 2e0366e11b..59e338c53c 100644
--- a/fenix/app/src/main/res/xml/preferences.xml
+++ b/fenix/app/src/main/res/xml/preferences.xml
@@ -128,16 +128,6 @@
             app:iconSpaceReserved="false"
             android:title="@string/preferences_delete_browsing_data_on_quit" />

-        <androidx.preference.Preference
-            android:key="@string/pref_key_notifications"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_notifications" />
-
-        <androidx.preference.Preference
-            android:key="@string/pref_key_data_choices"
-            app:iconSpaceReserved="false"
-            android:title="@string/preferences_data_collection" />
-
     </androidx.preference.PreferenceCategory>

     <PreferenceCategory
--
2.39.2 (Apple Git-143)

